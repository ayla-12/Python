# 메소드 오버라이딩

# 일반 유닛
class Unit:
    def __init__(self, name, hp, speed):
        self.name = name
        self.hp = hp
        self.speed = speed
        # self.damage = damage
        # print("{0} 유닛이 생성 되었습니다.".format(self.name))
        # print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))
    def move(self, location):
        print("[지상 유닛 이동]")
        print("{0} : {1} 방향으로 이동합니다. [속도 {2}]".format(self.name, location, self.speed))

# 공격 유닛
class AttackUnit(Unit):
    def __init__(self, name, hp, speed, damage): #생성자
        Unit.__init__(self, name, hp, speed) # 유닛을 상속받음
        self.damage = damage

    def attack(self, location): #메소드
        print("{0} : {1} 방향으로 적군을 공격 합니다. [공격력 {2}]".format(self.name, location, self.damage))
        # 셀프는 자기 자신을 의미 / self. 으로 자기 자신의 변수에 접근할 수 있음
        # 위 코드에서 이름과 데미지는 클래스에 저장된 걸 쓰는데 로케이션은 받아온 값을 쓴다는 것

    def damaged(self, damage):
        print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))
        if self.hp <= 0:
            print("{0} : 파괴되었습니다.".format(self.name))

# 메딕: 의무병 -> 데미지가 필요없음


# 파이어뱃 : 공격 유닛, 화염방사기.
# firebat1 = AttackUnit("파이어뱃", 50, 16)
# firebat1.attack("5시")
#
# firebat1.damaged(25)
# firebat1.damaged(25)

# 드랍쉽 : 공중 유닛, 수송기. 마린 / 파이어뱃 / 탱크 등을 수송. 공격 X

# 날 수 있는 기능을 가진 클래스
class Flyable :
    def __init__(self, flying_speed):
        self.flying_speed = flying_speed

    def fly(self, name, location):
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]"\
            .format(name, location, self.flying_speed))

# 공중 공격 유닛 클래스
class FlyableAttackUnit(AttackUnit, Flyable):
    def __init__(self, name, hp, damage, flying_speed):
        AttackUnit.__init__(self, name, hp, 0, damage) #지상 스피드는 0으로 처리
        Flyable.__init__(self, flying_speed) # 두개 클래스를 상속받아서 새로운 클래스를 생성

    def move(self, location):
        print("[공중 유닛 이동]")
        self.fly(self.name, location)


# 벌쳐 : 지상 유닛, 기동성이 좋음
vulture = AttackUnit("벌쳐", 80, 10, 20)

# 배틀크루저 : 공중 유닛, 체력 좋음, 공격력도 좋음.
battlecruiser = FlyableAttackUnit("배틀크루저", 500, 25, 3)

vulture.move("11시")
battlecruiser.fly(battlecruiser.name, "9시")

# 위 코드처럼 쓰면 매번 공격 유닛을 만들때 지상으로 움직이는지 공중으로 움직이는지 구분해서 적어줘야함
# >> 따라서! move 하나만 이용해서 둘다 사용할 수 있도록 만들것임 : 메소드 오버라이딩!

vulture.move("11시")
battlecruiser.move("9시")

# 굳이 fly를 쓰지 않고 move를 써도 날아간다고 뜸!
# FlyableAttackUnit에서 새로 move()를 정의했기 때문에 공중 공격 유닛인 클래스 안에서 move를 쓰면 날아간다고 뜨는 거임
